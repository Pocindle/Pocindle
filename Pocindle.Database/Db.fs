// This code was generated by `SqlHydra.Npgsql` -- v0.400.0.0.
namespace Pocindle.Database.Db

type Column(reader: System.Data.IDataReader, getOrdinal: string -> int, column) =
        member __.Name = column
        member __.IsNull() = getOrdinal column |> reader.IsDBNull
        override __.ToString() = __.Name

type RequiredColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
        inherit Column(reader, getOrdinal, column)
        member __.Read(?alias) = alias |> Option.defaultValue __.Name |> getOrdinal |> getter

type OptionalColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
        inherit Column(reader, getOrdinal, column)
        member __.Read(?alias) = 
            match alias |> Option.defaultValue __.Name |> getOrdinal with
            | o when reader.IsDBNull o -> None
            | o -> Some (getter o)

type RequiredBinaryColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getValue: int -> obj, column) =
        inherit Column(reader, getOrdinal, column)
        member __.Read(?alias) = alias |> Option.defaultValue __.Name |> getOrdinal |> getValue :?> byte[]

type OptionalBinaryColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getValue: int -> obj, column) =
        inherit Column(reader, getOrdinal, column)
        member __.Read(?alias) = 
            match alias |> Option.defaultValue __.Name |> getOrdinal with
            | o when reader.IsDBNull o -> None
            | o -> Some (getValue o :?> byte[])
        
module auth =
    type schema_migrations = { version: string }
    type schema_migrationsReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.version = RequiredColumn(reader, getOrdinal, reader.GetString, "version")
        member __.Read() = { version = __.version.Read() }
        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    type refresh_tokens =
        { instance_id: Option<System.Guid>
          token: Option<string>
          user_id: Option<string>
          revoked: Option<bool>
          created_at: Option<System.DateTime>
          updated_at: Option<System.DateTime>
          id: int64 }

    type refresh_tokensReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.instance_id = OptionalColumn(reader, getOrdinal, reader.GetGuid, "instance_id")
        member __.token = OptionalColumn(reader, getOrdinal, reader.GetString, "token")
        member __.user_id = OptionalColumn(reader, getOrdinal, reader.GetString, "user_id")
        member __.revoked = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "revoked")
        member __.created_at = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "created_at")
        member __.updated_at = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "updated_at")
        member __.id = RequiredColumn(reader, getOrdinal, reader.GetInt64, "id")
        member __.Read() =
            { instance_id = __.instance_id.Read()
              token = __.token.Read()
              user_id = __.user_id.Read()
              revoked = __.revoked.Read()
              created_at = __.created_at.Read()
              updated_at = __.updated_at.Read()
              id = __.id.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    type audit_log_entries =
        { instance_id: Option<System.Guid>
          id: System.Guid
          payload: Option<string>
          created_at: Option<System.DateTime> }

    type audit_log_entriesReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.instance_id = OptionalColumn(reader, getOrdinal, reader.GetGuid, "instance_id")
        member __.id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "id")
        member __.payload = OptionalColumn(reader, getOrdinal, reader.GetString, "payload")
        member __.created_at = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "created_at")
        member __.Read() =
            { instance_id = __.instance_id.Read()
              id = __.id.Read()
              payload = __.payload.Read()
              created_at = __.created_at.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    type instances =
        { id: System.Guid
          uuid: Option<System.Guid>
          raw_base_config: Option<string>
          created_at: Option<System.DateTime>
          updated_at: Option<System.DateTime> }

    type instancesReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "id")
        member __.uuid = OptionalColumn(reader, getOrdinal, reader.GetGuid, "uuid")
        member __.raw_base_config = OptionalColumn(reader, getOrdinal, reader.GetString, "raw_base_config")
        member __.created_at = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "created_at")
        member __.updated_at = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "updated_at")
        member __.Read() =
            { id = __.id.Read()
              uuid = __.uuid.Read()
              raw_base_config = __.raw_base_config.Read()
              created_at = __.created_at.Read()
              updated_at = __.updated_at.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    type users =
        { instance_id: Option<System.Guid>
          id: System.Guid
          aud: Option<string>
          role: Option<string>
          email: Option<string>
          encrypted_password: Option<string>
          invited_at: Option<System.DateTime>
          confirmation_token: Option<string>
          confirmation_sent_at: Option<System.DateTime>
          recovery_token: Option<string>
          recovery_sent_at: Option<System.DateTime>
          email_change: Option<string>
          email_change_sent_at: Option<System.DateTime>
          last_sign_in_at: Option<System.DateTime>
          raw_app_meta_data: Option<string>
          raw_user_meta_data: Option<string>
          is_super_admin: Option<bool>
          created_at: Option<System.DateTime>
          updated_at: Option<System.DateTime>
          email_change_token_new: Option<string>
          phone: Option<string>
          phone_confirmed_at: Option<System.DateTime>
          phone_change_sent_at: Option<System.DateTime>
          email_confirmed_at: Option<System.DateTime>
          confirmed_at: Option<System.DateTime>
          phone_change: Option<string>
          phone_change_token: Option<string>
          email_change_token_current: Option<string>
          email_change_confirm_status: Option<int16> }

    type usersReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.instance_id = OptionalColumn(reader, getOrdinal, reader.GetGuid, "instance_id")
        member __.id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "id")
        member __.aud = OptionalColumn(reader, getOrdinal, reader.GetString, "aud")
        member __.role = OptionalColumn(reader, getOrdinal, reader.GetString, "role")
        member __.email = OptionalColumn(reader, getOrdinal, reader.GetString, "email")
        member __.encrypted_password = OptionalColumn(reader, getOrdinal, reader.GetString, "encrypted_password")
        member __.invited_at = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "invited_at")
        member __.confirmation_token = OptionalColumn(reader, getOrdinal, reader.GetString, "confirmation_token")
        member __.confirmation_sent_at = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "confirmation_sent_at")
        member __.recovery_token = OptionalColumn(reader, getOrdinal, reader.GetString, "recovery_token")
        member __.recovery_sent_at = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "recovery_sent_at")
        member __.email_change = OptionalColumn(reader, getOrdinal, reader.GetString, "email_change")
        member __.email_change_sent_at = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "email_change_sent_at")
        member __.last_sign_in_at = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "last_sign_in_at")
        member __.raw_app_meta_data = OptionalColumn(reader, getOrdinal, reader.GetString, "raw_app_meta_data")
        member __.raw_user_meta_data = OptionalColumn(reader, getOrdinal, reader.GetString, "raw_user_meta_data")
        member __.is_super_admin = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "is_super_admin")
        member __.created_at = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "created_at")
        member __.updated_at = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "updated_at")
        member __.email_change_token_new = OptionalColumn(reader, getOrdinal, reader.GetString, "email_change_token_new")
        member __.phone = OptionalColumn(reader, getOrdinal, reader.GetString, "phone")
        member __.phone_confirmed_at = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "phone_confirmed_at")
        member __.phone_change_sent_at = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "phone_change_sent_at")
        member __.email_confirmed_at = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "email_confirmed_at")
        member __.confirmed_at = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "confirmed_at")
        member __.phone_change = OptionalColumn(reader, getOrdinal, reader.GetString, "phone_change")
        member __.phone_change_token = OptionalColumn(reader, getOrdinal, reader.GetString, "phone_change_token")
        member __.email_change_token_current = OptionalColumn(reader, getOrdinal, reader.GetString, "email_change_token_current")
        member __.email_change_confirm_status = OptionalColumn(reader, getOrdinal, reader.GetInt16, "email_change_confirm_status")
        member __.Read() =
            { instance_id = __.instance_id.Read()
              id = __.id.Read()
              aud = __.aud.Read()
              role = __.role.Read()
              email = __.email.Read()
              encrypted_password = __.encrypted_password.Read()
              invited_at = __.invited_at.Read()
              confirmation_token = __.confirmation_token.Read()
              confirmation_sent_at = __.confirmation_sent_at.Read()
              recovery_token = __.recovery_token.Read()
              recovery_sent_at = __.recovery_sent_at.Read()
              email_change = __.email_change.Read()
              email_change_sent_at = __.email_change_sent_at.Read()
              last_sign_in_at = __.last_sign_in_at.Read()
              raw_app_meta_data = __.raw_app_meta_data.Read()
              raw_user_meta_data = __.raw_user_meta_data.Read()
              is_super_admin = __.is_super_admin.Read()
              created_at = __.created_at.Read()
              updated_at = __.updated_at.Read()
              email_change_token_new = __.email_change_token_new.Read()
              phone = __.phone.Read()
              phone_confirmed_at = __.phone_confirmed_at.Read()
              phone_change_sent_at = __.phone_change_sent_at.Read()
              email_confirmed_at = __.email_confirmed_at.Read()
              confirmed_at = __.confirmed_at.Read()
              phone_change = __.phone_change.Read()
              phone_change_token = __.phone_change_token.Read()
              email_change_token_current = __.email_change_token_current.Read()
              email_change_confirm_status = __.email_change_confirm_status.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

module storage =
    type buckets =
        { id: string
          name: string
          owner: Option<System.Guid>
          created_at: Option<System.DateTime>
          updated_at: Option<System.DateTime>
          ``public``: Option<bool> }

    type bucketsReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.id = RequiredColumn(reader, getOrdinal, reader.GetString, "id")
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.owner = OptionalColumn(reader, getOrdinal, reader.GetGuid, "owner")
        member __.created_at = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "created_at")
        member __.updated_at = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "updated_at")
        member __.``public`` = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "public")
        member __.Read() =
            { id = __.id.Read()
              name = __.name.Read()
              owner = __.owner.Read()
              created_at = __.created_at.Read()
              updated_at = __.updated_at.Read()
              ``public`` = __.``public``.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    type objects =
        { bucket_id: Option<string>
          name: Option<string>
          owner: Option<System.Guid>
          metadata: Option<string>
          id: System.Guid
          created_at: Option<System.DateTime>
          updated_at: Option<System.DateTime>
          last_accessed_at: Option<System.DateTime> }

    type objectsReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.bucket_id = OptionalColumn(reader, getOrdinal, reader.GetString, "bucket_id")
        member __.name = OptionalColumn(reader, getOrdinal, reader.GetString, "name")
        member __.owner = OptionalColumn(reader, getOrdinal, reader.GetGuid, "owner")
        member __.metadata = OptionalColumn(reader, getOrdinal, reader.GetString, "metadata")
        member __.id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "id")
        member __.created_at = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "created_at")
        member __.updated_at = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "updated_at")
        member __.last_accessed_at = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "last_accessed_at")
        member __.Read() =
            { bucket_id = __.bucket_id.Read()
              name = __.name.Read()
              owner = __.owner.Read()
              metadata = __.metadata.Read()
              id = __.id.Read()
              created_at = __.created_at.Read()
              updated_at = __.updated_at.Read()
              last_accessed_at = __.last_accessed_at.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

    type migrations =
        { id: int
          name: string
          hash: string
          executed_at: Option<System.DateTime> }

    type migrationsReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.id = RequiredColumn(reader, getOrdinal, reader.GetInt32, "id")
        member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
        member __.hash = RequiredColumn(reader, getOrdinal, reader.GetString, "hash")
        member __.executed_at = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "executed_at")
        member __.Read() =
            { id = __.id.Read()
              name = __.name.Read()
              hash = __.hash.Read()
              executed_at = __.executed_at.Read() }

        member __.ReadIfNotNull(column: Column) =
            if column.IsNull() then None else Some(__.Read())

module ``public`` =
    type schemaversions =
        { scriptname: string
          applied: System.DateTime
          schemaversionsid: int }

    type schemaversionsReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.scriptname = RequiredColumn(reader, getOrdinal, reader.GetString, "scriptname")
        member __.applied = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "applied")
        member __.schemaversionsid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "schemaversionsid")
        member __.Read() =
            { scriptname = __.scriptname.Read()
              applied = __.applied.Read()
              schemaversionsid = __.schemaversionsid.Read() }

        member __.ReadIfNotNull() =
            if __.schemaversionsid.IsNull() then None else Some(__.Read())

    type users =
        { pocketusername: string
          kindleemailaddress: Option<string>
          pocketaccesstoken: Option<string>
          userid: int64
          column_5: Option<int> }

    type usersReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.pocketusername = RequiredColumn(reader, getOrdinal, reader.GetString, "pocketusername")
        member __.kindleemailaddress = OptionalColumn(reader, getOrdinal, reader.GetString, "kindleemailaddress")
        member __.pocketaccesstoken = OptionalColumn(reader, getOrdinal, reader.GetString, "pocketaccesstoken")
        member __.userid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "userid")
        member __.column_5 = OptionalColumn(reader, getOrdinal, reader.GetInt32, "column_5")
        member __.Read() =
            { pocketusername = __.pocketusername.Read()
              kindleemailaddress = __.kindleemailaddress.Read()
              pocketaccesstoken = __.pocketaccesstoken.Read()
              userid = __.userid.Read()
              column_5 = __.column_5.Read() }

        member __.ReadIfNotNull() =
            if __.userid.IsNull() then None else Some(__.Read())

    type delivery =
        { articleurl: string
          epubfile: string
          mobifile: string
          deliverystatus: int
          deliveryfailedmessage: Option<string>
          deliveryid: int64
          userid: int64
          ``to``: Option<string> }

    type deliveryReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
        member __.articleurl = RequiredColumn(reader, getOrdinal, reader.GetString, "articleurl")
        member __.epubfile = RequiredColumn(reader, getOrdinal, reader.GetString, "epubfile")
        member __.mobifile = RequiredColumn(reader, getOrdinal, reader.GetString, "mobifile")
        member __.deliverystatus = RequiredColumn(reader, getOrdinal, reader.GetInt32, "deliverystatus")
        member __.deliveryfailedmessage = OptionalColumn(reader, getOrdinal, reader.GetString, "deliveryfailedmessage")
        member __.deliveryid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "deliveryid")
        member __.userid = RequiredColumn(reader, getOrdinal, reader.GetInt64, "userid")
        member __.``to`` = OptionalColumn(reader, getOrdinal, reader.GetString, "to")
        member __.Read() =
            { articleurl = __.articleurl.Read()
              epubfile = __.epubfile.Read()
              mobifile = __.mobifile.Read()
              deliverystatus = __.deliverystatus.Read()
              deliveryfailedmessage = __.deliveryfailedmessage.Read()
              deliveryid = __.deliveryid.Read()
              userid = __.userid.Read()
              ``to`` = __.``to``.Read() }

        member __.ReadIfNotNull() =
            if __.deliveryid.IsNull() then None else Some(__.Read())

type HydraReader(reader: Npgsql.NpgsqlDataReader) =
    let mutable accFieldCount = 0
    let buildGetOrdinal fieldCount =
        let dictionary = 
            [0..reader.FieldCount-1] 
            |> List.map (fun i -> reader.GetName(i), i)
            |> List.sortBy snd
            |> List.skip accFieldCount
            |> List.take fieldCount
            |> dict
        accFieldCount <- accFieldCount + fieldCount
        fun col -> dictionary.Item col
        
    let lazyschema_migrations = lazy (auth.schema_migrationsReader (reader, buildGetOrdinal 1))
    let lazyrefresh_tokens = lazy (auth.refresh_tokensReader (reader, buildGetOrdinal 7))
    let lazyaudit_log_entries = lazy (auth.audit_log_entriesReader (reader, buildGetOrdinal 4))
    let lazyinstances = lazy (auth.instancesReader (reader, buildGetOrdinal 5))
    let lazyusers = lazy (auth.usersReader (reader, buildGetOrdinal 29))
    let lazybuckets = lazy (storage.bucketsReader (reader, buildGetOrdinal 6))
    let lazyobjects = lazy (storage.objectsReader (reader, buildGetOrdinal 9))
    let lazymigrations = lazy (storage.migrationsReader (reader, buildGetOrdinal 4))
    let lazyschemaversions = lazy (``public``.schemaversionsReader (reader, buildGetOrdinal 3))
    let lazyusers = lazy (``public``.usersReader (reader, buildGetOrdinal 5))
    let lazydelivery = lazy (``public``.deliveryReader (reader, buildGetOrdinal 8))
    member __.schema_migrations = lazyschema_migrations.Value
    member __.refresh_tokens = lazyrefresh_tokens.Value
    member __.audit_log_entries = lazyaudit_log_entries.Value
    member __.instances = lazyinstances.Value
    member __.users = lazyusers.Value
    member __.buckets = lazybuckets.Value
    member __.objects = lazyobjects.Value
    member __.migrations = lazymigrations.Value
    member __.schemaversions = lazyschemaversions.Value
    member __.delivery = lazydelivery.Value
    member private __.AccFieldCount with get () = accFieldCount and set (value) = accFieldCount <- value
    member private __.GetReaderByName(entity: string, isOption: bool) =
        match entity, isOption with
        | "schema_migrations", false -> __.schema_migrations.Read >> box
        | "schema_migrations", true -> failwith "Could not read type 'schema_migrations option' because no primary key exists."
        | "refresh_tokens", false -> __.refresh_tokens.Read >> box
        | "refresh_tokens", true -> failwith "Could not read type 'refresh_tokens option' because no primary key exists."
        | "audit_log_entries", false -> __.audit_log_entries.Read >> box
        | "audit_log_entries", true -> failwith "Could not read type 'audit_log_entries option' because no primary key exists."
        | "instances", false -> __.instances.Read >> box
        | "instances", true -> failwith "Could not read type 'instances option' because no primary key exists."
        | "users", false -> __.users.Read >> box
        | "users", true -> failwith "Could not read type 'users option' because no primary key exists."
        | "buckets", false -> __.buckets.Read >> box
        | "buckets", true -> failwith "Could not read type 'buckets option' because no primary key exists."
        | "objects", false -> __.objects.Read >> box
        | "objects", true -> failwith "Could not read type 'objects option' because no primary key exists."
        | "migrations", false -> __.migrations.Read >> box
        | "migrations", true -> failwith "Could not read type 'migrations option' because no primary key exists."
        | "schemaversions", false -> __.schemaversions.Read >> box
        | "schemaversions", true -> __.schemaversions.ReadIfNotNull >> box
        | "users", false -> __.users.Read >> box
        | "users", true -> __.users.ReadIfNotNull >> box
        | "delivery", false -> __.delivery.Read >> box
        | "delivery", true -> __.delivery.ReadIfNotNull >> box
        | _ -> failwith $"Could not read type '{entity}' because no generated reader exists."

    static member private GetPrimitiveReader(t: System.Type, reader: Npgsql.NpgsqlDataReader, isOpt: bool) =
        let wrap get (ord: int) = 
                if isOpt 
                then (if reader.IsDBNull ord then None else get ord |> Some) |> box 
                else get ord |> box 
        
        if t = typedefof<bool> then Some(wrap reader.GetBoolean)
        else if t = typedefof<int16> then Some(wrap reader.GetInt16)
        else if t = typedefof<int> then Some(wrap reader.GetInt32)
        else if t = typedefof<int64> then Some(wrap reader.GetInt64)
        else if t = typedefof<double> then Some(wrap reader.GetDouble)
        else if t = typedefof<decimal> then Some(wrap reader.GetDecimal)
        else if t = typedefof<string> then Some(wrap reader.GetString)
        else if t = typedefof<System.Guid> then Some(wrap reader.GetGuid)
        else if t = typedefof<System.DateTime> then Some(wrap reader.GetDateTime)
        else if t = typedefof<System.TimeSpan> then Some(wrap reader.GetTimeSpan)
        else if t = typedefof<byte []> then Some(wrap reader.GetValue)
        else if t = typedefof<char> then Some(wrap reader.GetChar)
        else None

    static member Read(reader: Npgsql.NpgsqlDataReader) = 
            let hydra = HydraReader(reader)
            
            let getOrdinalAndIncrement() = 
                let ordinal = hydra.AccFieldCount
                hydra.AccFieldCount <- hydra.AccFieldCount + 1
                ordinal
            
            let buildEntityReadFn (t: System.Type) = 
                let t, isOpt = 
                    if t.IsGenericType && t.GetGenericTypeDefinition() = typedefof<Option<_>> 
                    then t.GenericTypeArguments.[0], true
                    else t, false
            
                match HydraReader.GetPrimitiveReader(t, reader, isOpt) with
                | Some primitiveReader -> 
                    let ord = getOrdinalAndIncrement()
                    fun () -> primitiveReader ord
                | None ->
                    hydra.GetReaderByName(t.Name, isOpt)
            
            // Return a fn that will hydrate 'T (which may be a tuple)
            // This fn will be called once per each record returned by the data reader.
            let t = typeof<'T>
            if FSharp.Reflection.FSharpType.IsTuple(t) then
                let readEntityFns = FSharp.Reflection.FSharpType.GetTupleElements(t) |> Array.map buildEntityReadFn
                fun () ->
                    let entities = readEntityFns |> Array.map (fun read -> read())
                    Microsoft.FSharp.Reflection.FSharpValue.MakeTuple(entities, t) :?> 'T
            else
                let readEntityFn = t |> buildEntityReadFn
                fun () -> 
                    readEntityFn() :?> 'T
        
